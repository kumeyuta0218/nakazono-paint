{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2018",                               /* コンパイル後のJavaScriptバージョン */
    "lib": ["DOM", "ESNext"],                         /* コンパイルの際に含める組み込みライブラリを指定 */
    // "jsx": "preserve",                                /* JSXをどのような構成のJavaScriptに出力するか */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* クラスのプロパティの定義にプロパティ初期化子を使うことを強制 */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "ESNext",                               /* 出力するモジュールの形式を指定する */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "node",                       /* モジュールの解決方法を指定 */
    // "baseUrl": "./",                                  /* モジュールの非相対インポートの起点となるディレクトリを指定 */
    // "paths": {},                                      /* 個別にパターン指定した一連のモジュールの解決を再マッピング */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* JSONファイルをインポートしてできたオブジェクトに自動で型をつける */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* JavaScriptファイルのインポートを可能にする */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* コンパイル対象となった各ファイルに対応する.d.tsファイルを生成する */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                               /* コンパイル結果を出力するディレクトリを指定 */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* 型チェックのみを行い、コンパイル結果のファイルを出力しない */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* すべてのファイルを単一のモジュールとしてコンパイルする場合に安全でない記法をコンパイルエラーにする */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* 明示的にデフォルトエクスポートしていないモジュールでもデフォルトインポートできるようにする */
    "esModuleInterop": true,                             /* importの記述を統一 */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* ファイル名の大文字と小文字の区別をする */

    /* Type Checking */
    "strict": true,                                   /* noImplicitAny ~ alwaysStrict をまとめて有効化 */
    // "noImplicitAny": true,                            /* 暗黙的に型がanyになる場合エラー */
    // "strictNullChecks": true,                         /* 他のすべての型から null および undefined を代入不可 */
    // "strictFunctionTypes": true,                      /* 関数の引数の型チェックが共変的（ Covariant ）ではなく、反変的（ Contravariant ）に行われるようにする */
    // "strictBindCallApply": true,                      /* 'bind', 'call', 'apply'を使用して関数を呼び出した場合引数の型チェックを行う */
    // "strictPropertyInitialization": true,             /* class内でプロパティ宣言があるがconstructor内で値がセットされていない場合エラー */
    // "noImplicitThis": true,                           /* 暗黙的にthisの型がanyになる場合エラー */
    // "useUnknownInCatchVariables": true,               /* catch 文で捕捉した例外を unknown として扱う */
    // "alwaysStrict": true,                             /* 'use strict'を全てのファイルの先頭に付与する */
    "noUnusedLocals": true,                           /* 利用していないローカル変数がある場合エラー */
    "noUnusedParameters": true,                       /* 利用していない関数パラメータがある場合エラー */
    "exactOptionalPropertyTypes": true,               /* name?: stringのようなオプショナルプロパティに明示的にundefinedを代入できなくする */
    "noImplicitReturns": true,                        /* 関数内の全てのコードパスにおいて値を返却していることを強制する */
    "noFallthroughCasesInSwitch": true,               /* switch文のcase内にbreakやreturnを記述することを強制する */
    "noUncheckedIndexedAccess": true,                 /* インデックスシグネチャでのアクセスで得られる型は常にundefinedとのユニオン型になる */
    "noImplicitOverride": true,                       /* オーバーライドには必ずoverride修飾子をつけることを強制する */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["./src/ts/**/*.ts"]
}
